<?php
/**
 * VulnerabilityScanner
 * This is the base for the VulnerabilityScanner module for UmbrellaAntivirus
 *
 * @since 2.0
 * @package UmbrellaAntivirus
 */

namespace Umbrella;

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly!
}

/**
 * VulnerabilityScanner
 * Scans plugin and themes for known vulnerabilities
 *
 * @package UmbrellaAntivirus
 */
class VulnerabilityScanner extends UmbrellaAntivirus {

	/**
	 * Whitelabel autoload actions/methods
	 * List of valid methods/hooks.
	 *
	 * @since 2.0
	 * @var array
	 */
	protected $autoload = array( 'admin_menu', 'wp_ajax_scan_plugins', 'wp_ajax_scan_themes' );

	/**
	 * Admin Menu
	 * This function will run when WordPress calls the hook "admin_menu".
	 */
	public function admin_menu() {
		$this->add_submenu(
			'Plugin & Themes',
			'admin_page_view',
			'fa fa-puzzle-piece',
			'vulnerability-scanner'
		);
	}

	/**
	 * Admin Page View
	 * Load admin page view
	 */
	public function admin_page_view() {
		$this->render( 'vulnerability-scanner' );
	}

	/**
	 * AJAX: Scan plugins
	 * Scan plugins for vulnerabilities
	 */
	public function wp_ajax_scan_plugins() {
		$this->only_admin(); // Die if not admin.
		$this->render_json( array( 'plugins' => $this->download_plugins_data() ) );
	}

	/**
	 * AJAX: Scan themes
	 * Scan themes for vulnerabilities
	 */
	public function wp_ajax_scan_themes() {
		$this->only_admin(); // Die if not admin.
		$this->render_json( array( 'themes' => $this->download_themes_data() ) );
	}

	/**
	 * Download plugins data
	 * Dowloads vulnerability information from wpvulndb.com
	 *
	 * @return array
	 */
	public static function download_plugins_data() {

		$all_plugins = get_plugins();
		$plugins = array();

		foreach ( $all_plugins as $key => $plugin ) {

			unset( $merge ); // Reset merge.
			unset( $json ); // Reset JSON response.
			unset( $vulndb ); // Reset vulndb temp variable.

			$slug = explode( '/', $key );
			$slug = reset( $slug );

			if ( 'hello.php' == $slug ) {
				continue;
			}

			if ( false === ( $json = get_transient( "umbrella_vulndb_plugin_{$slug}" ) ) ) {
				$json = wp_remote_get( "https://wpvulndb.com/api/v1/plugins/{$slug}" );
				if ( ! is_wp_error( $json ) ) {
					set_transient( "umbrella_vulndb_plugin_{$slug}", $json, 300 );
				}
			}

			$merge = array(
				'name' => $plugin['Name'],
				'version' => $plugin['Version'],
				'author' => $plugin['Author'],
				'issues' => array(),
			);

			if ( ! is_wp_error( $json ) and 200 == $json['response']['code'] ) {
				$vulndb = json_decode( $json['body'] );

				if ( is_object( $vulndb ) ) {
					foreach ( $vulndb->plugin->vulnerabilities as $v ) {
						unset( $issue );

						$issue['title'] = $v->title;
						$issue['patch_version'] = $v->fixed_in;

						if ( version_compare( $merge['version'], $v->fixed_in, '>=' ) ) {
							$issue['status'] = 'patched';
						} else {
							$issue['status'] = 'warning';
						}

						if ( isset( $v->url ) ) {
							foreach ( $v->url as $url ) {
								$issue['links'][] = $url;
							}
						}

						$merge['issues'][] = $issue;
					}
				}
			}

			$merge['issues'] = array_reverse( $merge['issues'] );
			$plugins[] = $merge;

		}

		return $plugins;
	}

	/**
	 * Download themes data
	 * Dowloads vulnerability information from wpvulndb.com
	 *
	 * @return array
	 */
	public static function download_themes_data() {

		$all_themes = wp_get_themes();
		$themes = array();

		foreach ( $all_themes as $slug => $theme ) {

			unset( $merge ); // Reset merge.
			unset( $json ); // Reset JSON response.
			unset( $vulndb ); // Reset vulndb temp variable.

			if ( false === ( $json = get_transient( "umbrella_vulndb_theme_{$slug}" ) ) ) {
				$json = wp_remote_get( "https://wpvulndb.com/api/v1/themes/{$slug}" );
				if ( ! is_wp_error( $json ) ) {
					set_transient( "umbrella_vulndb_theme_{$slug}", $json, 300 );
				}
			}

			$merge = array(
				'name' => $theme->get( 'Name' ),
				'version' => $theme->get( 'Version' ),
				'author' => $theme->get( 'Author' ),
				'issues' => array(),
			);

			if ( ! is_wp_error( $json ) and 200 == $json['response']['code'] ) {
				$vulndb = json_decode( $json['body'] );

				if ( is_object( $vulndb ) ) {
					foreach ( $vulndb->theme->vulnerabilities as $v ) {
						unset( $issue );

						$issue['title'] = $v->title;
						$issue['patch_version'] = $v->fixed_in;

						if ( version_compare( $merge['version'], $v->fixed_in, '>=' ) ) {
							$issue['status'] = 'patched';
						} else {
							$issue['status'] = 'warning';
						}

						if ( isset( $v->url ) ) {
							foreach ( $v->url as $url ) {
								$issue['links'][] = $url;
							}
						}

						$merge['issues'][] = $issue;
					}
				}
			}
			$merge['issues'] = array_reverse( $merge['issues'] );
			$themes[] = $merge;
		}

		return $themes;
	}
}
